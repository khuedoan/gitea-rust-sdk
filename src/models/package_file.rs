/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PackageFile : PackageFile represents a package file
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageFile {
    #[serde(rename = "Size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "md5", skip_serializing_if = "Option::is_none")]
    pub md5: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "sha1", skip_serializing_if = "Option::is_none")]
    pub sha1: Option<String>,
    #[serde(rename = "sha256", skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    #[serde(rename = "sha512", skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
}

impl PackageFile {
    /// PackageFile represents a package file
    pub fn new() -> PackageFile {
        PackageFile {
            size: None,
            id: None,
            md5: None,
            name: None,
            sha1: None,
            sha256: None,
            sha512: None,
        }
    }
}
