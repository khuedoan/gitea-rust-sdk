/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// IssueFormField : IssueFormField represents a form field
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueFormField {
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "validations", skip_serializing_if = "Option::is_none")]
    pub validations: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl IssueFormField {
    /// IssueFormField represents a form field
    pub fn new() -> IssueFormField {
        IssueFormField {
            attributes: None,
            id: None,
            r#type: None,
            validations: None,
        }
    }
}
