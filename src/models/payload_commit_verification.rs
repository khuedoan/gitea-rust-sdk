/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PayloadCommitVerification : PayloadCommitVerification represents the GPG verification of a commit
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PayloadCommitVerification {
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(rename = "signer", skip_serializing_if = "Option::is_none")]
    pub signer: Option<Box<models::PayloadUser>>,
    #[serde(rename = "verified", skip_serializing_if = "Option::is_none")]
    pub verified: Option<bool>,
}

impl PayloadCommitVerification {
    /// PayloadCommitVerification represents the GPG verification of a commit
    pub fn new() -> PayloadCommitVerification {
        PayloadCommitVerification {
            payload: None,
            reason: None,
            signature: None,
            signer: None,
            verified: None,
        }
    }
}
