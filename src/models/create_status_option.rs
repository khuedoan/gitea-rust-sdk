/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CreateStatusOption : CreateStatusOption holds the information needed to create a new CommitStatus for a Commit
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateStatusOption {
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// CommitStatusState holds the state of a CommitStatus It can be \"pending\", \"success\", \"error\" and \"failure\"
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "target_url", skip_serializing_if = "Option::is_none")]
    pub target_url: Option<String>,
}

impl CreateStatusOption {
    /// CreateStatusOption holds the information needed to create a new CommitStatus for a Commit
    pub fn new() -> CreateStatusOption {
        CreateStatusOption {
            context: None,
            description: None,
            state: None,
            target_url: None,
        }
    }
}
