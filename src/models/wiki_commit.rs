/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// WikiCommit : WikiCommit page commit/revision
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WikiCommit {
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::CommitUser>>,
    #[serde(rename = "commiter", skip_serializing_if = "Option::is_none")]
    pub commiter: Option<Box<models::CommitUser>>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "sha", skip_serializing_if = "Option::is_none")]
    pub sha: Option<String>,
}

impl WikiCommit {
    /// WikiCommit page commit/revision
    pub fn new() -> WikiCommit {
        WikiCommit {
            author: None,
            commiter: None,
            message: None,
            sha: None,
        }
    }
}
