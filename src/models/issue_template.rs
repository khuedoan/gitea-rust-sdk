/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// IssueTemplate : IssueTemplate represents an issue template for a repository
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueTemplate {
    #[serde(rename = "about", skip_serializing_if = "Option::is_none")]
    pub about: Option<String>,
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<models::IssueFormField>>,
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "file_name", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "ref", skip_serializing_if = "Option::is_none")]
    pub r#ref: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

impl IssueTemplate {
    /// IssueTemplate represents an issue template for a repository
    pub fn new() -> IssueTemplate {
        IssueTemplate {
            about: None,
            body: None,
            content: None,
            file_name: None,
            labels: None,
            name: None,
            r#ref: None,
            title: None,
        }
    }
}
