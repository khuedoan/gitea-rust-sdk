/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Attachment : Attachment a generic attachment
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attachment {
    #[serde(
        rename = "browser_download_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub browser_download_url: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "download_count", skip_serializing_if = "Option::is_none")]
    pub download_count: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

impl Attachment {
    /// Attachment a generic attachment
    pub fn new() -> Attachment {
        Attachment {
            browser_download_url: None,
            created_at: None,
            download_count: None,
            id: None,
            name: None,
            size: None,
            uuid: None,
        }
    }
}
