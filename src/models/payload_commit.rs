/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0+dev-892-g9de5e39e2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PayloadCommit : PayloadCommit represents a commit
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PayloadCommit {
    #[serde(rename = "added", skip_serializing_if = "Option::is_none")]
    pub added: Option<Vec<String>>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::PayloadUser>>,
    #[serde(rename = "committer", skip_serializing_if = "Option::is_none")]
    pub committer: Option<Box<models::PayloadUser>>,
    /// sha1 hash of the commit
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "modified", skip_serializing_if = "Option::is_none")]
    pub modified: Option<Vec<String>>,
    #[serde(rename = "removed", skip_serializing_if = "Option::is_none")]
    pub removed: Option<Vec<String>>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "verification", skip_serializing_if = "Option::is_none")]
    pub verification: Option<Box<models::PayloadCommitVerification>>,
}

impl PayloadCommit {
    /// PayloadCommit represents a commit
    pub fn new() -> PayloadCommit {
        PayloadCommit {
            added: None,
            author: None,
            committer: None,
            id: None,
            message: None,
            modified: None,
            removed: None,
            timestamp: None,
            url: None,
            verification: None,
        }
    }
}
